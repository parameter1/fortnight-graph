type Query {
  allStories(pagination: PaginationInput = {}, sort: StorySortInput = {}): StoryConnection!
  advertiserStories(input: AdvertiserStoriesInput!, pagination: PaginationInput = {}, sort: StorySortInput = {}): StoryConnection!
  publisherStories(input: PublisherStoriesInput!, pagination: PaginationInput = {}, sort: StorySortInput = {}): StoryConnection!
  publishedStories(pagination: PaginationInput = {}, sort: StorySortInput = {}): StoryConnection!
  searchStories(pagination: PaginationInput = {}, phrase: String!): StoryConnection!
  autocompleteStories(pagination: PaginationInput = {}, phrase: String!): StoryConnection!
  story(input: ModelIdInput!): Story!
  publishedStory(input: PublishedStoryInput!): Story!
  storyHash(input: StoryHashInput!): Story!
  storySitemap: [StorySitemapItem]!
}

type Mutation {
  cloneStory(input: ModelIdInput!): Story! @readOnly
  createStory(input: CreateStoryInput!): Story! @readOnly
  updateStory(input: UpdateStoryInput!): Story! @readOnly
  deleteStory(input: ModelIdInput!): String! @readOnly
  # An empty imageId will unset the primary image.
  storyPrimaryImage(storyId: String!, imageId: String): Story! @readOnly
  removeStoryImage(storyId: String!, imageId: String!): Story! @readOnly
  addStoryImage(storyId: String!, imageId: String!): Story! @readOnly

  storyTitle(id: String!, value: String!): Story! @readOnly
  storyTeaser(id: String!, value: String!): Story! @readOnly
  storyBody(id: String!, value: String!): Story! @readOnly
  storyPublishedAt(id: String!, value: Date): Story! @readOnly
}

enum StorySortField {
  title
  createdAt
  updatedAt
  publishedAt
}

enum StoryStatus {
  Deleted
  Placeholder
  Published
  Scheduled
  Draft
}

type Story implements UserAttribution & Timestampable {
  id: String!
  hash: String!
  title: String!
  slug: String!
  advertiser: Advertiser!
  publisher(contextId: String): Publisher! #optionally can override the primary publisher.
  teaser: String
  body: String
  path: String!
  status: StoryStatus!
  placeholder: Boolean!
  deleted: Boolean!
  publishedAt: Date
  primaryImage: Image
  images: [Image]
  previewUrl: String!
  url: String!
  campaigns(pagination: PaginationInput = {}, sort: CampaignSortInput = {}): CampaignConnection!
  createdAt: Date!
  updatedAt: Date!
  createdBy: User!
  updatedBy: User!
  metrics: StoryMetrics!
  reports: StoryReports!
}

type StorySitemapItem {
  id: String!
  loc: String!
  lastmod: String
  changefreq: String
  priority: Float
  image: StorySitemapImage
}

type StorySitemapImage {
  id: String!
  loc: String!
  caption: String
}

type StoryReports {
  byDay(startDate: Date!, endDate: Date!): [StoryReportByDay]!
  acquisition: [StoryReportAcquisition]!
  devices: [StoryReportDevices]!
}

type StoryReportByDay {
  date(format: String!): String!
  metrics: StoryMetrics!
}

type StoryReportAcquisition {
  channelGrouping: String!
  metrics: StoryMetrics!
}

type StoryReportDevices {
  deviceCategory: String!
  metrics: StoryMetrics!
}

type StoryMetrics {
  pageviews: Int!
  uniquePageviews: Int!
  sessions: Int!
  users: Int!
  avgSessionDuration: Float!
  bounceRate: Float!
  timeOnPage: Float!
  avgTimeOnPage: Float!
  shares: Int!
}

type StoryConnection {
  totalCount: Int!
  edges: [StoryEdge]!
  pageInfo: PageInfo!
}

type StoryEdge {
  node: Story!
  cursor: Cursor!
}

input StorySearchInput {
  typeahead: StoryTypeAheadInput!
}

input StoryTypeAheadInput {
  field: StoryTypeAheadField!
  term: String!
}

enum StoryTypeAheadField {
  title
}

input StoryHashInput {
  advertiserId: String!
  hash: String!
}

input AdvertiserStoriesInput {
  advertiserId: String
  externalId: String
  publisherId: String
  excludeStoryIds: [String]
}

input PublishedStoryInput {
  id: String!
  preview: Boolean = false
}

input StorySortInput {
  field: StorySortField! = createdAt
  order: Int! = -1
}

input StoryPayloadInput {
  title: String!
  teaser: String
  body: String
  advertiserId: String!
  publisherId: String!
  publishedAt: Date
}

input PublisherStoriesInput {
  domainName: String
  website: String
}

input CreateStoryInput {
  payload: StoryPayloadInput!
}

input UpdateStoryInput {
  id: String!
  payload: StoryPayloadInput!
}

input AssignStoryValueInput {
  id: String!
  field: String!
  value: Mixed
}
